package com.dxz.home.controller;

import com.alibaba.fastjson.JSON;
import com.dxz.home.dao.UserMapper;
import com.dxz.home.pojo.Connection;
import com.dxz.home.pojo.Course;
import com.dxz.home.result.CodeInfo;
import com.dxz.home.result.Result;
import com.dxz.home.service.CourseService;
import com.dxz.home.utils.JedisUtil;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.hibernate.validator.constraints.Range;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/")
@Validated
public class CourseController {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    @Resource
    private UserMapper userMapper;
    @Autowired
    private CourseService courseService;
    private JedisUtil jedisUtil = new JedisUtil();

    // Long id,Integer grade,Integer subject
    @GetMapping("/b/video/list/search")
    public Result videoList(@NotNull(message = "用户id不能为空") Long id,
                            @Range(min = 0, max = 6, message = "年级数字应为1-6") Integer grade,
                            @Range(min = 1, max = 6, message = "科目数字应为1-6") Integer subject,
                            @RequestParam(required = false,
                                    defaultValue = "1",value = "pageNumber") Integer pageNumber,
                            @RequestParam(required = false,
                                    defaultValue = "10",value = "pageSize") Integer pageSize) {
        PageHelper.startPage(pageNumber,pageSize);
        // 根据用户id查询年级代号
        Integer userGrade = userMapper.selectByPrimaryKey(id).getGrade();
        log.info("用户 {} 的年级代号：{}",id,userGrade);
        // 新建course，设置属性
        Course course = new Course();
        // 这里的全部不能是无数据了，因为如果用户设置了年级，点击全部就只能查看该年级的视频，可以设为0为全部
        if(grade == null){
            if(userGrade != null){
                course.setGrade(userGrade);
            }
        // 0 为全部
        }else {
            if(grade != 0){
                course.setGrade(grade);
            }
        }
        course.setSubject(subject);
        // 视频状态，1为上架
        course.setStatus(1);
        List<Course> videos = courseService.findCourseListSearch(course);
        if(videos.size() == 0) {
            log.error("无符合条件的视频");
            return new Result(CodeInfo.COURSE_FIND_NULL.getCode(), CodeInfo.COURSE_FIND_NULL.getMsg());
        }
        // 视频集合，含老师信息
        PageInfo<Course> pageInfo = new PageInfo<Course>(videos);
        // banner视频
        List<Course> banners = courseService.findCourseBanner();
        if(banners.size() == 0) {
            log.error("无banner视频");
            return new Result(CodeInfo.COURSE_BANNER_NULL.getCode(), CodeInfo.COURSE_BANNER_NULL.getMsg());
        }
        List<Connection> connections = courseService.findCourseConnection(id);
        // 用户收藏的视频id列表
        List<Connection> collectUser = courseService.findCourseCollect(connections);
        // 用户点赞的视频id列表
        List<Connection> loveUser = courseService.findCourseLove(connections);
        Map<String,Object> map = new HashMap<>();
        map.put("banners",banners);
        map.put("collectUser",collectUser);
        map.put("loveUser",loveUser);
        map.put("videos",pageInfo);
        return new Result(CodeInfo.SUCCESS.getCode(),CodeInfo.SUCCESS.getMsg(),map);
    }

    @GetMapping(value = {"/b/video/{id}","/b/video/"})
    public Result getVideo(@NotNull(message = "用户id不能为空") Long uid,
                           @NotNull(message = "视频id不能为空") @PathVariable(value = "id",required = false) Long id){
        Map<String,Object> map = new HashMap<>();
        // 根据id查询课程，含老师名称
        Course course = courseService.findCourseById(id);
        if(course == null) {
            log.error("视频 {} 信息获取失败", id );
            return new Result(CodeInfo.COURSE_MSG_GET_FAIL.getCode(), CodeInfo.COURSE_MSG_GET_FAIL.getMsg());
        }else {
			List<Connection> connections = courseService.findCourseConnection(id);
			// 用户收藏的视频id列表
			List<Connection> collectUser = courseService.findCourseCollect(connections);
			// 用户点赞的视频id列表
			List<Connection> loveUser = courseService.findCourseLove(connections);
			map.put("video",course);
			map.put("collectUser",collectUser);
			map.put("loveUser",loveUser);
			log.info("视频 {} 查询成功", id);
            return new Result(CodeInfo.SUCCESS.getCode(), CodeInfo.SUCCESS.getMsg(), map);
        }
    }

    // Long uid,Long vid,Integer status
    @PostMapping("/b/video/connection")
    public Result addConnection(@Valid Connection connection){
        // 插入用户-视频关系数据，修改视频数量信息
        Boolean result = courseService.addConnection(connection);
        if(!result){
            log.error("课程 {} 收藏/点赞失败",connection.getVid());
            return new Result(CodeInfo.COURSE_CONNECT_INSTER_FAIL.getCode(), CodeInfo.COURSE_CONNECT_INSTER_FAIL.getMsg());
        }
        return new Result(CodeInfo.SUCCESS.getCode(), CodeInfo.SUCCESS.getMsg(),connection.getVid());
    }

    // Long uid,Long vid,Integer status
    @DeleteMapping("/b/video/connection")
    public Result deleteConnection(@Valid Connection connection){
        // 删除用户-视频关系数据，修改视频数量信息
        Boolean result = courseService.deleteConnection(connection);
        if(!result){
            log.error("课程 {} 取消收藏/点赞失败",connection.getVid());
            return new Result(CodeInfo.COURSE_CONNECT_DELETE_FAIL.getCode(), CodeInfo.COURSE_CONNECT_DELETE_FAIL.getMsg());
        }
        return new Result(CodeInfo.SUCCESS.getCode(), CodeInfo.SUCCESS.getMsg());
    }

    @GetMapping("/b/video/collection")
    public Result collectVideoList(@NotNull(message = "用户id不能为空") Long id,
                                   @RequestParam(required = false,
                                           defaultValue = "1",value = "pageNumber") Integer pageNumber,
                                   @RequestParam(required = false,
                                           defaultValue = "10",value = "pageSize") Integer pageSize) {
        PageHelper.startPage(pageNumber,pageSize);
        List<Course> videos = courseService.courseCollectList(id);
        if(videos.size() == 0) {
            log.error("用户 {} 无收藏的视频列表",id);
            return new Result(CodeInfo.COURSE_FIND_NULL.getCode(), CodeInfo.COURSE_FIND_NULL.getMsg());
        }
        // 用户收藏的视频集合，含老师信息
        PageInfo<Course> pageInfo = new PageInfo<Course>(videos);

        List<Connection> connections = courseService.findCourseConnection(id);
        // 用户点赞的视频id列表
        List<Connection> loveUser = courseService.findCourseLove(connections);
        Map<String,Object> map = new HashMap<>();
        map.put("loveUser",loveUser);
        map.put("videos",pageInfo);
        return new Result(CodeInfo.SUCCESS.getCode(), CodeInfo.SUCCESS.getMsg(), map);
    }

}
