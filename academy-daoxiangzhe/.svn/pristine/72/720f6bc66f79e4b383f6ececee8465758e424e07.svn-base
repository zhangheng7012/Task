package com.dxz.admin.utils;

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSS;
import com.aliyun.oss.OSSClientBuilder;
import com.aliyun.oss.OSSException;
import com.aliyun.oss.model.CannedAccessControlList;
import com.aliyun.oss.model.ObjectMetadata;
import com.aliyun.oss.model.PutObjectRequest;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.util.UUID;

@Component
public class AliyunOSSUtil {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    @Value("${AliyunOSS.endpoint}")
    private String endpoint;

    @Value("${AliyunOSS.accessKeyId}")
    private String accessKeyId;

    @Value("${AliyunOSS.accessKeySecret}")
    private String accessKeySecret;

    // Bucket命名规范如下：只能包括小写字母，数字和短横线（-），必须以小写字母或者数字开头，长度必须在3-63字节之间。
    @Value("${AliyunOSS.bucketName}")
    private String bucketName;

    @Value("${AliyunOSS.fileUrl}")
    private String fileUrl;

    public String upPhoto(MultipartFile multipartFile){

        // 创建OSSClient实例。
        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);
        // 使用 UUID 给图片重命名，并去掉四个“-”
        String name = UUID.randomUUID().toString().replaceAll("-", "");
        // 获取图片名称
        String ext = multipartFile.getOriginalFilename();
        // 获取图片的前缀名称 加 当前时间戳
//        String prefix = ext.substring(0, ext.lastIndexOf(".")) + "_" + System.currentTimeMillis();
        // 获取图片的后缀名称，含“.”
        String suffix = ext.substring(ext.lastIndexOf("."));
        String photoName = name + suffix ;

        try {
            // 判断Bucket是否存在。
            if (ossClient.doesBucketExist(bucketName)) {
                log.info("您已经创建Bucket：" + bucketName + "。");
            } else {
                log.info("您的Bucket不存在，创建Bucket：" + bucketName + "。");
                // 创建Bucket。
                ossClient.createBucket(bucketName);
            }
            // oss中没有文件夹的概念，如果想传到对应的目录下，可以在object名称前添加对应的路径。
            String fileName = "academy-dxz/" + photoName;

            // 创建PutObjectRequest对象，构造上传请求。
            // <yourLocalFile>由本地文件路径加文件名包括后缀组成，例如/users/local/myfile.txt。
            // 数据流上传，将 MultipartFile 转为 InputStream，适用于所有的InputStream子类。
            PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName,fileName,new ByteArrayInputStream(multipartFile.getBytes()));

            // 如果需要上传时设置存储类型与访问权限，请参考以下示例代码。
            ObjectMetadata metadata = new ObjectMetadata();
            // metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());
            // metadata.setObjectAcl(CannedAccessControlList.Private);

            // 这里也能设置content-disposition，但是不知道设置为什么可以取消强制下载。
//            metadata.setContentDisposition();
            // 指定Content-Type
            // metadata.setContentType("application/octet-stream");
            metadata.setContentType("image");
            putObjectRequest.setMetadata(metadata);
            // 上传文件
            ossClient.putObject(putObjectRequest);
            // 设置权限(公开读)
            ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);

            // 上传文件。<yourLocalFile>由本地文件路径加文件名包括后缀组成，例如/users/local/myfile.txt。
            // 数据流上传，将 MultipartFile 转为 InputStream，适用于所有的InputStream子类。
//            ossClient.putObject(bucketName,fileName,new ByteArrayInputStream(multipartFile.getBytes()));

            // 关闭OSSClient。
            ossClient.shutdown();
            // 图片的url
            String url = fileUrl + fileName;
            return url;
        } catch (OSSException oe) {
            log.error("出现异常1，异常为：" + oe.getMessage());
        } catch (ClientException ce) {
            log.error("出现异常2，异常为：" + ce.getMessage());
        } catch (Exception e) {
            log.error("出现异常3，异常为：" + e.getMessage());
        }
        return null;
    }

    public boolean checkFileType(MultipartFile multipartFile) {
        String fileType = "";
        // 获取图片名称
        String fileName = multipartFile.getOriginalFilename();
        // 名称最后一个“.”的索引位置
        int i = fileName.lastIndexOf(".");
        if (i > 0) {
            // 截取“.”后的后缀，将类型转为大写字母
            fileType = fileName.substring(i + 1).toUpperCase();
        }
        if ("JPG".equals(fileType) || "PNG".equals(fileType) || "JPEG".equals(fileType)){
            log.info("图片类型符合要求：" + fileType);
            return true;
        }
        log.error("图片类型错误：" + fileType);
        return false;
    }

    public boolean deletePhoto(String fileUrl) {
        // 根据url截取图片的名称
        String fileString = StringUtils.substringAfterLast(fileUrl, "aliyuncs.com/");
        String fileName = StringUtils.substringBeforeLast(fileString, "?");
        // 创建OSSClient实例。
        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);
        // 删除文件。如需删除文件夹，请将ObjectName设置为对应的文件夹名称。如果文件夹非空，则需要将文件夹下的所有object删除后才能删除该文件夹。
        ossClient.deleteObject(bucketName, fileName);
        // 判断文件是否存在
        boolean exist = ossClient.doesObjectExist(bucketName, fileName);
        // 关闭OSSClient。
        ossClient.shutdown();
        if (!exist) {
            return true;
        }
        return false;
    }

}
