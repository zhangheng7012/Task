package com.dxz.home;

import com.dxz.home.dao.UserMapper;
import com.dxz.home.pojo.User;
import com.dxz.home.result.CodeInfo;
import com.dxz.home.result.Result;
import com.dxz.home.service.UserService;
import com.dxz.home.utils.SMSUtil;
import com.dxz.home.utils.SendMailUtil;
import com.dxz.home.utils.TimeUtil;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;

@RunWith(SpringRunner.class)
@SpringBootTest
public class HomeApplicationTests {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private UserService userService;
    @Resource
    private UserMapper userMapper;
    @Autowired
    TimeUtil timeUtil;

    @Test
    public void contextos() {
        System.out.println(timeUtil.todayZeroTime());
    }

    @Test
    public void contetos() {
        long ai = 2;
        int a = 1;
        for (Long i = 2L; i < 6; i++) {
            System.out.println(i+ai);
        }
    }

    @Test
    public void contextLos() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);//控制时
        cal.set(Calendar.MINUTE, 0);//控制分
        cal.set(Calendar.SECOND, 0);//控制秒
        cal.set(Calendar.MILLISECOND, 0);//控制毫秒
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("今天零点零分零秒 时间戳："+cal.getTimeInMillis()+"今天零点："+sdf.format(cal.getTime()));

        Long time = System.currentTimeMillis();  //当前时间的时间戳
        long zero = time/(1000*3600*24)*(1000*3600*24) - TimeZone.getDefault().getRawOffset();
        System.out.println("今天零点零分零秒："+new Timestamp(zero));//今天零点零分零秒
        System.out.println("今天零点零分零秒 时间戳："+zero);

        System.out.println("当前时间的时间戳："+time);

        long now = System.currentTimeMillis() / 1000l;
        long daySecond = 60 * 60 * 24;
        long dayTime = now - (now + 8 * 3600) % daySecond;
        System.out.println("今天零点零分零秒 时间戳："+dayTime);

        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));    //获取东八区时间
        int year = c.get(Calendar.YEAR);    //获取年
        int month = c.get(Calendar.MONTH) + 1;   //获取月份，0表示1月份
        int day = c.get(Calendar.DAY_OF_MONTH);    //获取当前天数
        int first = c.getActualMinimum(c.DAY_OF_MONTH);    //获取本月最小天数
        int last = c.getActualMaximum(c.DAY_OF_MONTH);    //获取本月最大天数
        int time1 = c.get(Calendar.HOUR_OF_DAY);       //获取当前小时
        int min = c.get(Calendar.MINUTE);          //获取当前分钟
        int xx = c.get(Calendar.SECOND);          //获取当前秒

        SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        String curDate = s.format(c.getTime());  //当前日期
        System.out.println("当前时间："+year + "-" + month + "-"+ day + " "+time1 + ":" + min +":" + xx);
        System.out.println("第一天和最后天：" + first +"," + last);

        System.out.println("当前日期curDate====：" + curDate);
    }

    @Test
    public void sa() {
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);    //获取年
        // 在使用set方法之前，必须先clear一下，否则很多信息会继承自系统当前时间
        cal.clear();
        cal.set(Calendar.YEAR,year);//控制年
        // 控制月份，0表示1月份，这里设置为上个月
        cal.set(Calendar.MONTH,cal.get(Calendar.MONTH));
        // 控制天，这里设置为1号
        cal.set(Calendar.DAY_OF_MONTH, 1 );
        cal.set(Calendar.HOUR_OF_DAY, 0);//控制时
        cal.set(Calendar.MINUTE, 0);//控制分
        cal.set(Calendar.SECOND, 0);//控制秒
        cal.set(Calendar.MILLISECOND, 0);//控制毫秒
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("上个月一号零点零分零秒 时间戳："+cal.getTimeInMillis()+"上个月一号零点："+sdf.format(cal.getTime()));

        Calendar ca2 = Calendar.getInstance();
        int year2 = cal.get(Calendar.YEAR);    //获取年
        // 在使用set方法之前，必须先clear一下，否则很多信息会继承自系统当前时间
        ca2.clear();
        ca2.set(Calendar.YEAR,year2);//控制年
        // 控制月份，0表示1月份，这里设置为当月
        ca2.set(Calendar.MONTH,ca2.get(Calendar.MONTH) + 1);
        // 控制天，这里设置为1号
        ca2.set(Calendar.DAY_OF_MONTH, 1 );
        ca2.set(Calendar.HOUR_OF_DAY, 0);//控制时
        ca2.set(Calendar.MINUTE, 0);//控制分
        ca2.set(Calendar.SECOND, 0);//控制秒
        ca2.set(Calendar.MILLISECOND, 0);//控制毫秒
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("当月一号零点零分零秒 时间戳："+ca2.getTimeInMillis()+"当月一号零点："+sdf2.format(ca2.getTime()));
    }

    @Test
    public void s() {
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
        // 获取年，如果在clear()方法后获取，将获取1970年
        int year = cal.get(Calendar.YEAR);
        // 在使用set方法之前，必须先clear一下，否则很多信息会继承自系统当前时间
        cal.clear();
        cal.set(Calendar.YEAR,year);//控制年
        // 控制月份，0表示1月份，这里设置为当月
        cal.set(Calendar.MONTH,cal.get(Calendar.MONTH) + 1);
        // 控制天，这里设置为昨天的天数，1号也可以设置成上个月末
        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) -1 );
        cal.set(Calendar.HOUR_OF_DAY, 0);//控制时
        cal.set(Calendar.MINUTE, 0);//控制分
        cal.set(Calendar.SECOND, 0);//控制秒
        cal.set(Calendar.MILLISECOND, 0);//控制毫秒
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("昨天零点零分零秒 时间戳："+cal.getTimeInMillis()+"昨天零点："+sdf.format(cal.getTime()));

        Calendar ca2 = Calendar.getInstance();
        // 获取年，如果在clear()方法后获取，将获取1970年
        int year2 = ca2.get(Calendar.YEAR);
        // 在使用set方法之前，必须先clear一下，否则很多信息会继承自系统当前时间
        ca2.clear();
        ca2.set(Calendar.YEAR,year2);//控制年
        ca2.set(Calendar.MONTH,cal.get(Calendar.MONTH) + 1);//控制月份，0表示1月份
        ca2.set(Calendar.HOUR_OF_DAY, 0);//控制时
        ca2.set(Calendar.MINUTE, 0);//控制分
        ca2.set(Calendar.SECOND, 0);//控制秒
        ca2.set(Calendar.MILLISECOND, 0);//控制毫秒
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("今天零点零分零秒 时间戳："+ca2.getTimeInMillis()+"今天零点："+sdf2.format(ca2.getTime()));
    }

    // 可能是 容联 放假，测试用的短信通道无法使用
    @Autowired
    private SMSUtil smsUtil;
    @Test
    public void testSMSUtils() {
        String phone="13068791270";
        boolean i = smsUtil.sendTelCode(phone);
        if(i){
            System.out.println("哈哈哈哈哈");
        }else {
            System.out.println("ooooooo");
        }
    }

    @Test
    public void ll() {
        Long a = 10L;
        Long b = 20L;
        Long c = -20L;

        System.out.println("哈哈哈哈哈"+(a+b));
        System.out.println("ooooooo"+(a+c));
    }

    @Autowired
    private SendMailUtil sendMailUtil;
    @Test
    public void testSendMailUtil() {
        String mail="zhangheng@jnshu.com";
        boolean i = sendMailUtil.sendMailCode(mail);
        if(i){
            System.out.println("获取邮箱验证码成功");
        }else {
            System.out.println("获取邮箱验证码失败");
        }
    }

    @Test
    public void a() {
        //  Long.ValueOf(String); 返回Long包装类
        //  Long.parseLong(String); 返回long基本数据类型
        String phone="13068791270";
        Long phone2=Long.valueOf(phone);
        System.out.println("获取:"+phone2);

    }

    @Test
    public void checkFileType() {
        String fileType = "";
        // 获取图片名称
        String fileName = "shigdiabas.jPG";
        int i = fileName.lastIndexOf(".");
        System.out.println(i);
        if (i > 0) {
            fileType = fileName.substring(i + 1).toUpperCase();
            System.out.println("类型" + fileType);
        }
        if ("JPG".equals(fileType) || "PNG".equals(fileType) || "JPEG".equals(fileType)){
            System.out.println("成功！");
        }
        System.out.println("失败！");
    }

    @Test
    public void contextLoads() {
        Long id = 1L;
        User user = null;
        try {
            user = userMapper.selectByPrimaryKey(id);
            if(user == null) {
                log.info("用户 {} 不存在", id);
            }
        }catch (Exception e){
            log.error("用户信息获取失败：{}",e.getMessage());
        }
        log.info("用户 {} ", user);
    }

    @Test
    public void update() {
        User user = new User();
        user.setId(5L);
//        user.setName("哈哈哈");
        user.setAvatarUrl("sssss");
        user.setGrade(2);

        String phone="2222222222";
        Long phone2=Long.valueOf(phone);
        System.out.println("获取:"+phone2);

        user.setPhone(phone2);

        try {
            Boolean a = userService.updateUser(user);
            if (a) {
                log.info("用户 {} 信息编辑成功", user.getId());
            } else {
                log.error("用户 {} 信息编辑失败", user.getId());
            }
        }catch (Exception e){
            log.error("用户 {} 信息编辑失败：{}", user.getId() ,e.getMessage());
        }
    }

}
